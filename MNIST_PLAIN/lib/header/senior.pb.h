// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: senior.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_senior_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_senior_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_senior_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_senior_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_senior_2eproto;
class InputVector;
class InputVectorDefaultTypeInternal;
extern InputVectorDefaultTypeInternal _InputVector_default_instance_;
class PredictionBFV;
class PredictionBFVDefaultTypeInternal;
extern PredictionBFVDefaultTypeInternal _PredictionBFV_default_instance_;
class PredictionCKKS;
class PredictionCKKSDefaultTypeInternal;
extern PredictionCKKSDefaultTypeInternal _PredictionCKKS_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::InputVector* Arena::CreateMaybeMessage<::InputVector>(Arena*);
template<> ::PredictionBFV* Arena::CreateMaybeMessage<::PredictionBFV>(Arena*);
template<> ::PredictionCKKS* Arena::CreateMaybeMessage<::PredictionCKKS>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class InputVector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InputVector) */ {
 public:
  inline InputVector() : InputVector(nullptr) {};
  virtual ~InputVector();

  InputVector(const InputVector& from);
  InputVector(InputVector&& from) noexcept
    : InputVector() {
    *this = ::std::move(from);
  }

  inline InputVector& operator=(const InputVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputVector& operator=(InputVector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputVector* internal_default_instance() {
    return reinterpret_cast<const InputVector*>(
               &_InputVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputVector& a, InputVector& b) {
    a.Swap(&b);
  }
  inline void Swap(InputVector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputVector* New() const final {
    return CreateMaybeMessage<InputVector>(nullptr);
  }

  InputVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputVector& from);
  void MergeFrom(const InputVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InputVector";
  }
  protected:
  explicit InputVector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_senior_2eproto);
    return ::descriptor_table_senior_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated double values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  double _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_values() const;
  void _internal_add_values(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_values();
  public:
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:InputVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_senior_2eproto;
};
// -------------------------------------------------------------------

class PredictionCKKS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PredictionCKKS) */ {
 public:
  inline PredictionCKKS() : PredictionCKKS(nullptr) {};
  virtual ~PredictionCKKS();

  PredictionCKKS(const PredictionCKKS& from);
  PredictionCKKS(PredictionCKKS&& from) noexcept
    : PredictionCKKS() {
    *this = ::std::move(from);
  }

  inline PredictionCKKS& operator=(const PredictionCKKS& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictionCKKS& operator=(PredictionCKKS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictionCKKS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictionCKKS* internal_default_instance() {
    return reinterpret_cast<const PredictionCKKS*>(
               &_PredictionCKKS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PredictionCKKS& a, PredictionCKKS& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictionCKKS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictionCKKS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictionCKKS* New() const final {
    return CreateMaybeMessage<PredictionCKKS>(nullptr);
  }

  PredictionCKKS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictionCKKS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictionCKKS& from);
  void MergeFrom(const PredictionCKKS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionCKKS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PredictionCKKS";
  }
  protected:
  explicit PredictionCKKS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_senior_2eproto);
    return ::descriptor_table_senior_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated double values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  double _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_values() const;
  void _internal_add_values(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_values();
  public:
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:PredictionCKKS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_senior_2eproto;
};
// -------------------------------------------------------------------

class PredictionBFV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PredictionBFV) */ {
 public:
  inline PredictionBFV() : PredictionBFV(nullptr) {};
  virtual ~PredictionBFV();

  PredictionBFV(const PredictionBFV& from);
  PredictionBFV(PredictionBFV&& from) noexcept
    : PredictionBFV() {
    *this = ::std::move(from);
  }

  inline PredictionBFV& operator=(const PredictionBFV& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictionBFV& operator=(PredictionBFV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictionBFV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictionBFV* internal_default_instance() {
    return reinterpret_cast<const PredictionBFV*>(
               &_PredictionBFV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PredictionBFV& a, PredictionBFV& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictionBFV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictionBFV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictionBFV* New() const final {
    return CreateMaybeMessage<PredictionBFV>(nullptr);
  }

  PredictionBFV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictionBFV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictionBFV& from);
  void MergeFrom(const PredictionBFV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionBFV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PredictionBFV";
  }
  protected:
  explicit PredictionBFV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_senior_2eproto);
    return ::descriptor_table_senior_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated int32 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:PredictionBFV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_senior_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputVector

// repeated double values = 1;
inline int InputVector::_internal_values_size() const {
  return values_.size();
}
inline int InputVector::values_size() const {
  return _internal_values_size();
}
inline void InputVector::clear_values() {
  values_.Clear();
}
inline double InputVector::_internal_values(int index) const {
  return values_.Get(index);
}
inline double InputVector::values(int index) const {
  // @@protoc_insertion_point(field_get:InputVector.values)
  return _internal_values(index);
}
inline void InputVector::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:InputVector.values)
}
inline void InputVector::_internal_add_values(double value) {
  values_.Add(value);
}
inline void InputVector::add_values(double value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:InputVector.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
InputVector::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
InputVector::values() const {
  // @@protoc_insertion_point(field_list:InputVector.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
InputVector::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
InputVector::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:InputVector.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// PredictionCKKS

// repeated double values = 1;
inline int PredictionCKKS::_internal_values_size() const {
  return values_.size();
}
inline int PredictionCKKS::values_size() const {
  return _internal_values_size();
}
inline void PredictionCKKS::clear_values() {
  values_.Clear();
}
inline double PredictionCKKS::_internal_values(int index) const {
  return values_.Get(index);
}
inline double PredictionCKKS::values(int index) const {
  // @@protoc_insertion_point(field_get:PredictionCKKS.values)
  return _internal_values(index);
}
inline void PredictionCKKS::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:PredictionCKKS.values)
}
inline void PredictionCKKS::_internal_add_values(double value) {
  values_.Add(value);
}
inline void PredictionCKKS::add_values(double value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:PredictionCKKS.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PredictionCKKS::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PredictionCKKS::values() const {
  // @@protoc_insertion_point(field_list:PredictionCKKS.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PredictionCKKS::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PredictionCKKS::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:PredictionCKKS.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// PredictionBFV

// repeated int32 values = 1;
inline int PredictionBFV::_internal_values_size() const {
  return values_.size();
}
inline int PredictionBFV::values_size() const {
  return _internal_values_size();
}
inline void PredictionBFV::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictionBFV::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictionBFV::values(int index) const {
  // @@protoc_insertion_point(field_get:PredictionBFV.values)
  return _internal_values(index);
}
inline void PredictionBFV::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:PredictionBFV.values)
}
inline void PredictionBFV::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Add(value);
}
inline void PredictionBFV::add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:PredictionBFV.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PredictionBFV::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PredictionBFV::values() const {
  // @@protoc_insertion_point(field_list:PredictionBFV.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PredictionBFV::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PredictionBFV::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:PredictionBFV.values)
  return _internal_mutable_values();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_senior_2eproto
